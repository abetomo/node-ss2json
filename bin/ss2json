#!/usr/bin/env node

'use srict'

const SsToJson = require('..')
const { program } = require('commander')
const { existsSync, readFileSync } = require('fs')
const path = require('path')
const packageJson = existsSync(path.join(process.cwd(), 'package.json'))
  ? require(path.join(process.cwd(), 'package.json')) : {}

program
  .storeOptionsAsProperties(false)
  .showSuggestionAfterError()

program
  .command('get')
  .requiredOption('-a, --auth [AUTH_JSON_FILE_PATH]', 'JSON path for Google\'s authentication')
  .requiredOption('-i, --id [SPREADSHEET_ID]', 'Google Spreadsheet ID')
  .requiredOption('-n, --name [SHEET_NAME]', 'Sheet name in Google Spreadsheet')
  .action(async (options) => {
    try {
      const data = await (new SsToJson()).convert({
        authJsonPath: options.auth,
        spreadsheetId: options.id,
        sheetName: options.name
      })
      console.log(JSON.stringify(data))
    } catch (err) {
      console.error(err)
    }
  })

program
  .command('update')
  .requiredOption('-a, --auth [AUTH_JSON_FILE_PATH]', 'JSON path for Google\'s authentication')
  .requiredOption('-i, --id [SPREADSHEET_ID]', 'Google Spreadsheet ID')
  .requiredOption('-n, --name [SHEET_NAME]', 'Sheet name in Google Spreadsheet')
  .requiredOption('-d, --data [DATA_JSON_FILE_PATH]', 'JSON file path for update data')
  .option('--autoAddSheet', 'Add when there was no sheet.')
  .action(async (options) => {
    if (!existsSync(options.data)) {
      console.error(`Error: no such file or directory, open '${options.data}'`)
      return
    }

    try {
      const result = await (new SsToJson()).update({
        authJsonPath: options.auth,
        spreadsheetId: options.id,
        sheetName: options.name,
        values: JSON.parse(readFileSync(options.data)),
        autoAdd: options.autoAddSheet
      })
      console.log(result)
    } catch (err) {
      console.error(err)
    }
  })

program
  .version(packageJson.version)
  .parse(process.argv)

// vim: set ft=javascript :
