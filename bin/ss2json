#!/usr/bin/env node

'use srict'

const SsToJson = require('..')
const program = require('commander')
const fs = require('fs')
const path = require('path')
const packageJson = fs.existsSync(path.join(process.cwd(), 'package.json'))
  ? require(path.join(process.cwd(), 'package.json')) : {}

program
  .command('get')
  .option('-a, --auth [AUTH_JSON_FILE_PATH]', 'JSON path for Google\'s authentication')
  .option('-i, --id [SPREADSHEET_ID]', 'Google Spreadsheet ID')
  .option('-n, --name [SHEET_NAME]', 'Sheet name in Google Spreadsheet')
  .action((prg) => {
    (new SsToJson()).convert({
      authJsonPath: prg.auth,
      spreadsheetId: prg.id,
      sheetName: prg.name
    }).then((data) => {
      console.log(JSON.stringify(data))
    }).catch((err) => {
      console.error(err)
    })
  })

program
  .command('update')
  .option('-a, --auth [AUTH_JSON_FILE_PATH]', 'JSON path for Google\'s authentication')
  .option('-i, --id [SPREADSHEET_ID]', 'Google Spreadsheet ID')
  .option('-n, --name [SHEET_NAME]', 'Sheet name in Google Spreadsheet')
  .option('-d, --data [DATA_JSON_FILE_PATH]', 'JSON file path for update data')
  .action((prg) => {
    (new SsToJson()).update({
      authJsonPath: prg.auth,
      spreadsheetId: prg.id,
      sheetName: prg.name,
      values: JSON.parse(fs.readFileSync(prg.data))
    }).then((result) => {
      console.log(result)
    }).catch((err) => {
      console.error(err)
    })
  })

program
  .version(packageJson.version)
  .parse(process.argv)

if (!process.argv.slice(2).length) {
  program.outputHelp()
  process.exit(255)
}

// vim: set ft=javascript :
